## OOP Concepts in MemGuard-Java

- **Abstraction**  
  - `Rule` and `EventSource` are interfaces — they define *what* must be done, not *how*.  
  - Allows new detection rules or event generators to be added easily.

- **Encapsulation**  
  - `Simulator` hides how good/bad events are generated, exposing only `generate()`.  
  - `FeatureExtractor` hides entropy & base64 calculation details.

- **Inheritance**  
  - `BaseRule` provides common properties (rule name) that are inherited by all specific rules like `PowershellRule`, `EntropyRule`, etc.

- **Polymorphism**  
  - `RuleEngine` uses a `List<Rule>` → it can apply any detection rule without knowing its exact type.  
  - Example: `PowershellRule` and `EncodedCommandRule` are interchangeable at runtime.

- **Composition**  
  - `CompositeRule` groups multiple rules together with AND/OR logic.  
  - Enables building flexible and complex detection policies.

- **SOLID Principles**  
  - **S**: Each class has one responsibility (`Simulator` = event generation, `Reporter` = reporting).  
  - **O**: Easy to add new rules without changing existing `RuleEngine`.  
  - **L**: Any `Rule` subclass can replace another.  
  - **I**: Interfaces (`Rule`, `EventSource`, `EventStore`) are small and focused.  
  - **D**: `RuleEngine` depends on abstraction (`Rule`) not specific implementations.
